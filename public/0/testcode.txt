# Helper function to serialize tree into list
def serialize(root):
    if not root:
        return []
    result, queue = [], [root]
    while any(queue):
        node = queue.pop(0)
        if node:
            result.append(node.val)
            queue.append(node.left)
            queue.append(node.right)
        else:
            result.append(None)
    while result and result[-1] is None:
        result.pop()
    return result

# Test case 1: Empty tree
root = None
inverted = Solution().invertTree(root)
assert serialize(inverted) == [], f"Expected [], but got {serialize(inverted)}"

# Test case 2: Single node
root = TreeNode(1)
inverted = Solution().invertTree(root)
assert serialize(inverted) == [1], f"Expected [1], but got {serialize(inverted)}"

# Test case 3: Full binary tree
root = TreeNode(1, TreeNode(2), TreeNode(3))
inverted = Solution().invertTree(root)
assert serialize(inverted) == [1, 3, 2], f"Expected [1, 3, 2], but got {serialize(inverted)}"

# Test case 4: Unbalanced tree
root = TreeNode(1, TreeNode(2, TreeNode(4)), TreeNode(3))
inverted = Solution().invertTree(root)
assert serialize(inverted) == [1, 3, 2, None, None, None, 4], f"Expected [1, 3, 2, None, None, None, 4], but got {serialize(inverted)}"

print("All test cases passed.")