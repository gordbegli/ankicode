def test_hasCycle():

    # Helper function to create a linked list from a list of values
    def create_linked_list(values, pos):
        if not values:
            return None
        head = ListNode(values[0])
        current = head
        cycle_entry = None
        if pos == 0:
            cycle_entry = head
        for index in range(1, len(values)):
            current.next = ListNode(values[index])
            current = current.next
            if index == pos:
                cycle_entry = current
        if pos != -1:
            current.next = cycle_entry
        return head

    solution = Solution()

    # Test case 1: Head = [3,2,0,-4], pos = 1
    head = create_linked_list([3, 2, 0, -4], 1)
    result = solution.hasCycle(head)
    print("Test case 1: Head = [3,2,0,-4], pos = 1")
    print(f"Output: {result}")
    assert result == True, "Test case 1 failed"

    # Test case 2: Head = [1,2], pos = 0
    head = create_linked_list([1, 2], 0)
    result = solution.hasCycle(head)
    print("Test case 2: Head = [1,2], pos = 0")
    print(f"Output: {result}")
    assert result == True, "Test case 2 failed"

    # Test case 3: Head = [1], pos = -1
    head = create_linked_list([1], -1)
    result = solution.hasCycle(head)
    print("Test case 3: Head = [1], pos = -1")
    print(f"Output: {result}")
    assert result == False, "Test case 3 failed"

    # Additional Test case 4: Empty list, pos = -1
    head = create_linked_list([], -1)
    result = solution.hasCycle(head)
    print("Test case 4: Head = [], pos = -1")
    print(f"Output: {result}")
    assert result == False, "Test case 4 failed"

    print("All test cases complete.")

test_hasCycle()